generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Order {
  id        Int      @id @default(autoincrement())
  orderId   String   @unique
  userId    Int
  status    String   @default("pending")
  createdAt DateTime @default(now())

  user      Auth     @relation(fields: [userId], references: [id], name: "AuthOrders")
  invoices  Invoice[] @relation("OrderInvoices")
}

model Method {
  methodId        Int      @id @default(autoincrement())
  methodWebsite   String   @unique
  status          String   @default("Active")
  access          String 
  multipleTaskRun Boolean  @default(false)

  // Relation to CCC
  cccAccounts     CCC[]    @relation("MethodCCC")

  // Relation to Subscription
  subscriptions   Subscription[] @relation("MethodSubscriptions")
}

model CCC {
  accountId            Int      @id @default(autoincrement())
  methodId             Int      // Foreign key to Method
  email                String   @unique
  password             String
  status               String   @default("active")
  access               String
  multipleTaskRun      Boolean  @default(false)
  useAccount           String
  totalLimit           Int 
  usedLimit            Int 
  remainingLimit       Int 
  refreshLimit         Int
  subscriptionExpiresDate DateTime

  // Foreign key relation to Method
  method               Method   @relation(fields: [methodId], references: [methodId], onDelete: Cascade, name: "MethodCCC")
}

model Subscription {
  id          Int      @id @default(autoincrement())
  userId      Int      // Foreign key to Auth
  packageId   Int      // Foreign key to Packages
  methodId    Int      // Foreign key to Method
  startDate   DateTime @default(now())
  endDate     DateTime
  status      String   @default("active")

  user        Auth     @relation(fields: [userId], references: [id])
  package     Packages @relation(fields: [packageId], references: [id])

  // Foreign key relation to Method
  method      Method   @relation(fields: [methodId], references: [methodId], onDelete: Cascade, name: "MethodSubscriptions")

  details     SubscriptionPackageDetail? 
}

model Auth {
  id                   Int           @id @default(autoincrement())
  email                String        @unique
  password             String
  username             String?       @unique
  phoneNumber          String?       @unique
  role                 Role
  resetPasswordToken   String?
  resetPasswordExpires BigInt?
  Profile              Profile?
  Submissions          Submissions[]
  subscriptions        Subscription[]
  services             Service[]     @relation("AuthServices")
  orders               Order[]       @relation("AuthOrders")
  invoices             Invoice[]     @relation("AuthInvoices")
  reports              Report[]      @relation("UserReports")
}

model Profile {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  firstName String? 
  lastName  String? 
  bio       String?
  avatar    String? 

  user      Auth     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  EMPLOYEE
  USER
  API
}
