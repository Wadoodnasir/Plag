// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Order {
  id        Int      @id @default(autoincrement())
  orderId   String   @unique
  userId    Int
  status    String   @default("pending")
  createdAt DateTime @default(now())

  // Relation to Auth (User)
  user      Auth     @relation(fields: [userId], references: [id], name: "AuthOrders")

  // Relation to Invoice
  invoices  Invoice[] @relation("OrderInvoices")
}

model Service {
  id        Int      @id @default(autoincrement())
  userId    Int      // Foreign key to Auth or User model
  name      String   
  status    String   @default("active")
  startDate DateTime @default(now())
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Auth (User)
  user      Auth     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "AuthServices")
}

model SubscriptionPackageDetail {
  id                Int      @id @default(autoincrement())
  packageName       String   // Name of the package
  expiryDate        DateTime // Expiry date of the package
  availableDocuments Int      // How many documents are available in this package
  cost              Float    // Package cost

  // Correct relation to Subscription with @unique for one-to-one relationship
  subscriptionId Int      @unique
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model Report {
  id                  Int      @id @default(autoincrement())
  fileName            String?
  aiPercentage        Float?
  similarityPercentage Float?
  status              String?
  date                DateTime?
  submittedFileUrl    String?
  plagReportUrl       String?
  aiReportUrl         String?
  plagFilePath        String?
  aiFilePath          String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                Auth?    @relation(fields: [userId], references: [id], name: "UserReports") 
  userId              Int?
}

model Auth {
  id                   Int           @id @default(autoincrement())
  email                String        @unique
  password             String
  username             String?       @unique
  phoneNumber          String?       @unique
  role                 Role
  resetPasswordToken   String?
  resetPasswordExpires BigInt?
  Profile              Profile?
  Submissions          Submissions[]
  subscriptions        Subscription[]
  services             Service[]     @relation("AuthServices")
  orders               Order[]       @relation("AuthOrders")
  invoices             Invoice[]     @relation("AuthInvoices")
  reports              Report[]      @relation("UserReports") // <-- Add this line
}


model Profile {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  firstName String? // First name from signup form
  lastName  String? // Last name from signup form
  bio       String?
  avatar    String? // Optional field for a profile picture URL

  // Relation to Auth (User)
  user Auth @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Submissions {
  id        Int       @id @default(autoincrement())
  userId    Int       // Foreign key to Auth model
  status    String?   @default("pending")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relation to Auth (User)
  user      Auth      @relation(fields: [userId], references: [id])

  turnitin  Turnitin?
}

model Turnitin {
  id                          Int         @id @default(autoincrement())
  minioId                     String?     // Unique ID for the file in Minio
  processSettings             Json?
  turnitinSubmissionId        BigInt?     // Unique ID for the submission in Turnitin.com
  wordCount                   String?
  isPlagiarismReportAvailable Boolean?    @default(false)
  similarity                  String?
  plagiarismReportMinio       String?
  isAiReportAvailable         Boolean?    @default(false)
  aiPlag                      String?
  aiPlagReportMinio           String?
  pageCount                   String?
  aiReportStatus              String?
  isAiReportError             Boolean?    @default(false)
  aiReportErrorCode           String?
  aiReportErrorMessage        String?

  // Foreign key to Submissions model
  submissionId                Int         @unique
  submission                  Submissions @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Packages {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float    // Package price
  duration  Int      // Duration in days
  features  String?  // Optional field for package features (could be JSON or a string description)
  
  // Relation to subscriptions
  subscriptions Subscription[]
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int      // Foreign key to Auth
  packageId Int      // Foreign key to Packages
  startDate DateTime @default(now())
  endDate   DateTime
  status    String   @default("active") // active, expired, canceled

  // Relations to Auth and Packages
  user      Auth     @relation(fields: [userId], references: [id])
  package   Packages @relation(fields: [packageId], references: [id])
  details   SubscriptionPackageDetail? 
}

model Invoice {
  id        Int      @id @default(autoincrement())
  amount    Float
  userId    Int
  orderId   Int
  status    String   @default("unpaid")

  // Relations to Auth and Order
  user      Auth     @relation(fields: [userId], references: [id], name: "AuthInvoices")
  order     Order    @relation(fields: [orderId], references: [id], name: "OrderInvoices")
}

enum Role {
  ADMIN
  EMPLOYEE
  USER
  API
}





